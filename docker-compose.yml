services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.pg
    container_name: my_postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres
      -c shared_preload_libraries=pg_cron
      -c cron.database_name=mydatabase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"
    networks:
      - app_network

  nestjs:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs_app
    restart: always
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 1m
      timeout: 30s
      retries: 2
      start_period: 30s
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - RUNNING_IN_DOCKER=true
      - MINIO_ENDPOINT=minio

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  minio-init:
    image: minio/mc
    container_name: minio_init
    depends_on:
      - minio
    networks:
      - app_network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing myminio/${MINIO_BUCKET_NAME} &&
      mc policy set public myminio/${MINIO_BUCKET_NAME} &&
      echo 'MinIO initialization completed successfully for bucket ${MINIO_BUCKET_NAME}' &&
      exit 0
      "
    restart: "no"
networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  minio_data: